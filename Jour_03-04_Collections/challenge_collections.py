# Challenge Jour 3-4 - Collections et Structures de Donn√©es
# Compl√©tez tous les exercices ci-dessous

# =============================================================================
# PARTIE A - Listes (60min)
# =============================================================================

print("=== PARTIE A - Listes ===")

# 1. Manipulation de base
films = ["Matrix", "Inception", "Interstellar"]
print(f"Films initiaux : {films}")

# Ajout de films
films.extend(["Blade Runner", "Dune"])
print(f"Apr√®s ajout : {films}")

# Suppression du premier film
premier_film = films.pop(0)
print(f"Film supprim√© : {premier_film}")
print(f"Apr√®s suppression : {films}")

# Tri alphab√©tique
films.sort()
print(f"Films tri√©s : {films}")

# 2. Calculs sur listes de notes
notes = [15, 12, 18, 9, 16, 14, 11, 17]
print(f"Notes : {notes}")

# Calculs sur les notes
moyenne = sum(notes) / len(notes)
note_min = min(notes)
note_max = max(notes)
notes_superieures_15 = len([note for note in notes if note > 15])
notes_paires = [note for note in notes if note % 2 == 0]

print(f"Moyenne : {moyenne:.2f}")
print(f"Note minimum : {note_min}")
print(f"Note maximum : {note_max}")
print(f"Notes > 15 : {notes_superieures_15}")
print(f"Notes paires : {notes_paires}")

# 3. Filtrage et transformation
nombres = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(f"Nombres : {nombres}")

# Cr√©ation des nouvelles listes
carres = [n**2 for n in nombres]
pairs = [n for n in nombres if n % 2 == 0]
multiples_3 = [n for n in nombres if n % 3 == 0]

print(f"Carr√©s : {carres}")
print(f"Nombres pairs : {pairs}")
print(f"Multiples de 3 : {multiples_3}")

# =============================================================================
# PARTIE B - Dictionnaires (60min)
# =============================================================================

print("\n=== PARTIE B - Dictionnaires ===")

# 1. Profil utilisateur
utilisateur = {"nom": "Alice", "age": 25, "ville": "Paris"}
print(f"Utilisateur initial : {utilisateur}")

# Modification du profil utilisateur
utilisateur["email"] = "alice@email.com"
utilisateur["age"] = 26

print(f"Utilisateur modifi√© : {utilisateur}")
print(f"Cl√©s : {list(utilisateur.keys())}")
print(f"Valeurs : {list(utilisateur.values())}")

# V√©rification de l'existence d'une cl√©
if "telephone" in utilisateur:
    print("Le t√©l√©phone existe")
else:
    print("Le t√©l√©phone n'existe pas")

# 2. Inventaire de magasin
inventaire = {
    "pommes": {"prix": 2.5, "stock": 50},
    "oranges": {"prix": 3.0, "stock": 30},
}
print(f"Inventaire initial : {inventaire}")

# Gestion de l'inventaire
inventaire["bananes"] = {"prix": 2.8, "stock": 40}
print(f"Inventaire avec bananes : {inventaire}")

# Calcul de la valeur totale
valeur_totale = 0
for produit, infos in inventaire.items():
    valeur = infos["prix"] * infos["stock"]
    valeur_totale += valeur
    print(f"{produit}: {infos['stock']} √ó {infos['prix']}‚Ç¨ = {valeur}‚Ç¨")

print(f"Valeur totale du stock : {valeur_totale}‚Ç¨")

# Produits avec stock < 35
print("Produits avec stock < 35 :")
for produit, infos in inventaire.items():
    if infos["stock"] < 35:
        print(f"- {produit}: {infos['stock']} unit√©s")

# Augmentation du stock des pommes
inventaire["pommes"]["stock"] += 20
print(f"Stock pommes apr√®s augmentation : {inventaire['pommes']['stock']}")

# 3. Compteur de fr√©quence des mots
texte = "python est fantastique python est puissant python est facile"
mots = texte.split()  # Divise le texte en liste de mots
print(f"Mots : {mots}")

# Comptage de fr√©quence des mots
frequence_mots = {}
for mot in mots:
    if mot in frequence_mots:
        frequence_mots[mot] += 1
    else:
        frequence_mots[mot] = 1

print(f"Fr√©quence des mots : {frequence_mots}")

# Mot le plus fr√©quent
mot_plus_frequent = max(frequence_mots.keys(), key=lambda mot: frequence_mots[mot])
print(
    f"Mot le plus fr√©quent : '{mot_plus_frequent}' ({frequence_mots[mot_plus_frequent]} fois)"
)

# Affichage de tous les mots avec occurrences
print("Tous les mots avec leurs occurrences :")
for mot, count in frequence_mots.items():
    print(f"- '{mot}': {count} fois")

# =============================================================================
# PARTIE C - Tuples et Sets (30min)
# =============================================================================

print("\n=== PARTIE C - Tuples et Sets ===")

# 1. Coordonn√©es GPS et calcul de distance
paris = (48.8566, 2.3522)
london = (51.5074, -0.1278)
print(f"Paris : {paris}")
print(f"London : {london}")

# Extraction des coordonn√©es
lat_paris, lon_paris = paris
lat_london, lon_london = london

print(f"Paris - Latitude: {lat_paris}, Longitude: {lon_paris}")
print(f"London - Latitude: {lat_london}, Longitude: {lon_london}")

# Calcul des diff√©rences
diff_lat = abs(lat_paris - lat_london)
diff_lon = abs(lon_paris - lon_london)
distance_approximative = (diff_lat**2 + diff_lon**2) ** 0.5

print(f"Diff√©rence latitude: {diff_lat:.4f}")
print(f"Diff√©rence longitude: {diff_lon:.4f}")
print(f"Distance approximative: {distance_approximative:.4f}")

# 2. Op√©rations sur les sets
set1 = {1, 2, 3, 4, 5}
set2 = {4, 5, 6, 7, 8}
print(f"Set 1 : {set1}")
print(f"Set 2 : {set2}")

# Op√©rations sur les sets
intersection = set1 & set2  # ou set1.intersection(set2)
union = set1 | set2  # ou set1.union(set2)
difference = set1 - set2  # ou set1.difference(set2)
diff_symetrique = set1 ^ set2  # ou set1.symmetric_difference(set2)

print(f"Intersection (√©l√©ments communs): {intersection}")
print(f"Union (tous les √©l√©ments): {union}")
print(f"Diff√©rence (dans set1 mais pas set2): {difference}")
print(f"Diff√©rence sym√©trique (dans un seul des deux): {diff_symetrique}")

# 3. Suppression de doublons avec des sets
nombres_avec_doublons = [1, 2, 2, 3, 3, 3, 4, 4, 5]
print(f"Avec doublons : {nombres_avec_doublons}")

# Suppression des doublons avec set
nombres_uniques = list(set(nombres_avec_doublons))
nombres_uniques.sort()  # Pour garder l'ordre
print(f"Sans doublons : {nombres_uniques}")

# Alternative qui pr√©serve l'ordre original
nombres_uniques_ordre = []
for nombre in nombres_avec_doublons:
    if nombre not in nombres_uniques_ordre:
        nombres_uniques_ordre.append(nombre)
print(f"Sans doublons (ordre pr√©serv√©) : {nombres_uniques_ordre}")

# =============================================================================
# MINI-PROJETS
# =============================================================================


# PROJET 1 - Gestionnaire de Courses (Jour 3)
def gestionnaire_courses():
    """Gestionnaire de liste de courses interactif"""
    courses = []

    while True:
        print("\n" + "=" * 30)
        print("    LISTE DE COURSES")
        print("=" * 30)
        print("1. Ajouter un article")
        print("2. Supprimer un article")
        print("3. Afficher la liste")
        print("4. Vider la liste")
        print("5. Nombre d'articles")
        print("0. Quitter")
        print("-" * 30)

        choix = input("Votre choix : ")

        if choix == "0":
            print("Au revoir !")
            break
        elif choix == "1":
            article = input("Article √† ajouter : ").strip()
            if article:
                courses.append(article)
                print(f"‚úÖ '{article}' ajout√© √† la liste!")
            else:
                print("‚ùå Article vide non ajout√©")
        elif choix == "2":
            if not courses:
                print("‚ùå Liste vide, rien √† supprimer")
            else:
                print("Articles actuels :")
                for i, article in enumerate(courses, 1):
                    print(f"  {i}. {article}")
                try:
                    index = int(input("Num√©ro de l'article √† supprimer : ")) - 1
                    if 0 <= index < len(courses):
                        article_supprime = courses.pop(index)
                        print(f"‚úÖ '{article_supprime}' supprim√©!")
                    else:
                        print("‚ùå Num√©ro invalide")
                except ValueError:
                    print("‚ùå Veuillez entrer un nombre valide")
        elif choix == "3":
            if not courses:
                print("üìã Liste vide")
            else:
                print("üìã Votre liste de courses :")
                for i, article in enumerate(courses, 1):
                    print(f"  {i}. {article}")
        elif choix == "4":
            if courses:
                courses.clear()
                print("‚úÖ Liste vid√©e!")
            else:
                print("üìã Liste d√©j√† vide")
        elif choix == "5":
            print(f"üìä Nombre d'articles : {len(courses)}")
        else:
            print("Choix invalide !")


# PROJET 2 - Carnet d'Adresses (Jour 4)
def carnet_adresses():
    """Carnet d'adresses avec dictionnaires"""
    contacts = {}
    # Structure : {nom: {"tel": "...", "email": "...", "ville": "..."}}

    while True:
        print("\n" + "=" * 35)
        print("     CARNET D'ADRESSES")
        print("=" * 35)
        print("1. Ajouter un contact")
        print("2. Rechercher un contact")
        print("3. Modifier un contact")
        print("4. Supprimer un contact")
        print("5. Lister tous les contacts")
        print("6. Contacts par ville")
        print("7. Nombre total de contacts")
        print("0. Quitter")
        print("-" * 35)

        choix = input("Votre choix : ")

        if choix == "0":
            print("Au revoir !")
            break
        elif choix == "1":
            nom = input("Nom du contact : ").strip().title()
            if nom in contacts:
                print("‚ùå Contact d√©j√† existant!")
            else:
                tel = input("T√©l√©phone : ").strip()
                email = input("Email : ").strip()
                ville = input("Ville : ").strip().title()

                contacts[nom] = {"tel": tel, "email": email, "ville": ville}
                print(f"‚úÖ Contact '{nom}' ajout√©!")
        elif choix == "2":
            if not contacts:
                print("‚ùå Aucun contact enregistr√©")
            else:
                terme = input("Rechercher (nom) : ").strip().title()
                if terme in contacts:
                    contact = contacts[terme]
                    print(f"üìû {terme}:")
                    print(f"   T√©l√©phone: {contact['tel']}")
                    print(f"   Email: {contact['email']}")
                    print(f"   Ville: {contact['ville']}")
                else:
                    print("‚ùå Contact non trouv√©")
        elif choix == "3":
            if not contacts:
                print("‚ùå Aucun contact enregistr√©")
            else:
                nom = input("Nom du contact √† modifier : ").strip().title()
                if nom in contacts:
                    print("Laissez vide pour conserver la valeur actuelle")
                    tel = input(
                        f"Nouveau t√©l√©phone ({contacts[nom]['tel']}) : "
                    ).strip()
                    email = input(f"Nouvel email ({contacts[nom]['email']}) : ").strip()
                    ville = (
                        input(f"Nouvelle ville ({contacts[nom]['ville']}) : ")
                        .strip()
                        .title()
                    )

                    if tel:
                        contacts[nom]["tel"] = tel
                    if email:
                        contacts[nom]["email"] = email
                    if ville:
                        contacts[nom]["ville"] = ville

                    print(f"‚úÖ Contact '{nom}' modifi√©!")
                else:
                    print("‚ùå Contact non trouv√©")
        elif choix == "4":
            if not contacts:
                print("‚ùå Aucun contact enregistr√©")
            else:
                nom = input("Nom du contact √† supprimer : ").strip().title()
                if nom in contacts:
                    del contacts[nom]
                    print(f"‚úÖ Contact '{nom}' supprim√©!")
                else:
                    print("‚ùå Contact non trouv√©")
        elif choix == "5":
            if not contacts:
                print("üìã Aucun contact enregistr√©")
            else:
                print("üìã Tous les contacts :")
                for nom, infos in sorted(contacts.items()):
                    print(f"  üë§ {nom}")
                    print(f"     üìû {infos['tel']}")
                    print(f"     üìß {infos['email']}")
                    print(f"     üèôÔ∏è {infos['ville']}")
                    print()
        elif choix == "6":
            if not contacts:
                print("‚ùå Aucun contact enregistr√©")
            else:
                villes = {}
                for nom, infos in contacts.items():
                    ville = infos["ville"]
                    if ville not in villes:
                        villes[ville] = []
                    villes[ville].append(nom)

                print("üìç Contacts par ville :")
                for ville, noms in sorted(villes.items()):
                    print(f"  üèôÔ∏è {ville}: {', '.join(noms)}")
        elif choix == "7":
            print(f"üìä Nombre total de contacts : {len(contacts)}")
        else:
            print("Choix invalide !")


# =============================================================================
# FONCTIONS UTILITAIRES
# =============================================================================


def analyser_liste(liste):
    """Analyse compl√®te d'une liste de nombres"""
    if not liste:
        return {"erreur": "Liste vide"}

    pairs = [n for n in liste if n % 2 == 0]
    impairs = [n for n in liste if n % 2 != 0]

    return {
        "nombre_elements": len(liste),
        "somme": sum(liste),
        "moyenne": sum(liste) / len(liste),
        "minimum": min(liste),
        "maximum": max(liste),
        "nombres_pairs": pairs,
        "nombres_impairs": impairs,
        "count_pairs": len(pairs),
        "count_impairs": len(impairs),
    }


def fusionner_dictionnaires(dict1, dict2):
    """Fusionne deux dictionnaires"""
    resultat = dict1.copy()  # Copie du premier dictionnaire
    resultat.update(dict2)  # Ajout des √©l√©ments du second
    return resultat


def nettoyer_texte(texte):
    """Nettoie un texte et retourne les mots uniques"""
    import string

    # Convertir en minuscules
    texte_clean = texte.lower()

    # Supprimer la ponctuation
    for punct in string.punctuation:
        texte_clean = texte_clean.replace(punct, " ")

    # Diviser en mots et supprimer les doublons
    mots = texte_clean.split()
    mots_uniques = list(set(mots))
    mots_uniques.sort()  # Tri alphab√©tique

    return mots_uniques


# =============================================================================
# TESTS ET EX√âCUTION
# =============================================================================

if __name__ == "__main__":
    print("üéØ Choisissez un projet √† tester :")
    print("1. Gestionnaire de courses")
    print("2. Carnet d'adresses")
    print("3. Tests des fonctions utilitaires")

    choix = input("\nVotre choix (1-3) : ")

    if choix == "1":
        gestionnaire_courses()
    elif choix == "2":
        carnet_adresses()
    elif choix == "3":
        # Tests des fonctions utilitaires
        test_liste = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        print(f"Analyse de {test_liste} :")
        print(analyser_liste(test_liste))

        dict_a = {"a": 1, "b": 2}
        dict_b = {"c": 3, "d": 4}
        print(f"Fusion de {dict_a} et {dict_b} :")
        print(fusionner_dictionnaires(dict_a, dict_b))

        texte_test = "Python, c'est fantastique! Python est puissant."
        print(f"Nettoyage de '{texte_test}' :")
        print(nettoyer_texte(texte_test))

    print("\nüéâ Bravo ! Vous ma√Ætrisez les collections Python !")
    print("‚è≠Ô∏è Passez maintenant aux Jour 5-6 : POO")
